generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Contact {
  id                String         @id @default(cuid())
  firstName         String
  lastName          String
  title             String?
  associatedAccount String?
  emailAddress      String?
  deskPhone         String?
  mobilePhone       String?
  city              String?
  state             String?
  country           String?
  timeZone          String?
  source            ContactSource?
  owner             String?
  status            ContactStatus?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  createdBy         String
  updatedBy         String
  deals             ActiveDeal[]   @relation("ContactDeals")
  activities        ActivityLog[]  @relation("ContactActivities")
  account           Account?       @relation(fields: [associatedAccount], references: [id])

  @@map("contacts")
}

model Account {
  id                String         @id @default(cuid())
  accountName       String
  accountRating     AccountRating?
  accountOwner      String?
  status            AccountStatus?
  industry          String?
  revenue           String?
  numberOfEmployees String?
  addressLine1      String?
  addressLine2      String?
  city              String?
  state             String?
  country           String?
  zipPostCode       String?
  timeZone          String?
  boardNumber       String?
  website           String?
  geo               Geography?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  createdBy         String
  updatedBy         String
  deals             ActiveDeal[]   @relation("AccountDeals")
  activities        ActivityLog[]  @relation("AccountActivities")
  contacts          Contact[]

  @@map("accounts")
}

model ActivityLog {
  id                 String              @id @default(cuid())
  activityType       ActivityType
  associatedContact  String?
  associatedAccount  String?
  dateTime           DateTime
  followUpSchedule   String?
  summary            String?
  outcomeDisposition OutcomeDisposition?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  createdBy          String
  updatedBy          String
  contact            Contact?            @relation("ContactActivities", fields: [associatedContact], references: [id])
  account            Account?            @relation("AccountActivities", fields: [associatedAccount], references: [id])

  @@map("activity_logs")
}

model ActiveDeal {
  id                String        @id @default(cuid())
  dealOwner         String?
  dealName          String
  businessLine      BusinessLine?
  associatedAccount String?
  associatedContact String?
  closingDate       DateTime?
  probability       String?
  dealValue         String?
  approvedBy        String?
  description       String?
  nextStep          String?
  geo               Geography?
  entity            Entity?
  stage             DealStage?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  createdBy         String
  updatedBy         String
  account           Account?      @relation("AccountDeals", fields: [associatedAccount], references: [id])
  contact           Contact?      @relation("ContactDeals", fields: [associatedContact], references: [id])

  @@map("active_deals")
}

model Lead {
  id         String      @id @default(cuid())
  firstName  String
  lastName   String
  company    String
  title      String?
  phone      String?
  email      String?
  leadSource LeadSource?
  status     LeadStatus?
  rating     LeadRating?
  owner      String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  createdBy  String
  updatedBy  String

  @@map("leads")
}

model UserProfile {
  id                 String    @id @default(cuid())
  firstName          String
  lastName           String
  email              String    @unique
  phone              String?
  title              String?
  department         String?
  role               UserRole? @default(USER)
  profilePhoto       String?
  timezone           String?
  language           String?   @default("en")
  emailNotifications Boolean   @default(true)
  smsNotifications   Boolean   @default(false)
  pushNotifications  Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@map("user_profiles")
}

model AuthUser {
  id                 String                @id @default(cuid())
  email              String                @unique
  displayName        String
  passwordHash       String
  role               String                @default("user")
  emailVerified      Boolean               @default(false)
  verificationToken  String?
  passwordResetToken String?
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  lastLogin          DateTime?
  activityLogs       AuthActivityLog[]
  passwordHistory    AuthPasswordHistory[]
  sessions           AuthSession[]

  @@map("auth_users")
}

model AuthSession {
  id        String   @id @default(cuid())
  userId    String
  tokenHash String
  expiresAt DateTime
  createdAt DateTime @default(now())
  ipAddress String?
  userAgent String?
  isActive  Boolean  @default(true)
  user      AuthUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("auth_sessions")
}

model AuthActivityLog {
  id              String   @id @default(cuid())
  userId          String
  activityType    String
  activityDetails String?
  ipAddress       String?
  userAgent       String?
  createdAt       DateTime @default(now())
  user            AuthUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("auth_activity_logs")
}

model AuthPasswordHistory {
  id           String   @id @default(cuid())
  userId       String
  passwordHash String
  createdAt    DateTime @default(now())
  user         AuthUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("auth_password_history")
}

enum ContactSource {
  DATA_RESEARCH
  REFERRAL
  EVENT
}

enum ContactStatus {
  SUSPECT
  PROSPECT
  ACTIVE_DEAL
  DO_NOT_CALL
}

enum AccountRating {
  PLATINUM
  GOLD
  SILVER
  BRONZE
}

enum AccountStatus {
  SUSPECT
  PROSPECT
  ACTIVE_DEAL
  DO_NOT_CALL
}

enum ActivityType {
  CALL
  EMAIL
  LINKEDIN_MSG
  SMS
  OTHER
}

enum OutcomeDisposition {
  VOICEMAIL
  RNR
  MEETING_FIXED
  MEETING_COMPLETED
  MEETING_RESCHEDULED
  NOT_INTERESTED
  DO_NOT_CALL
  CALLBACK_REQUESTED
  EMAIL_SENT
  EMAIL_RECEIVED
}

enum BusinessLine {
  HUMAN_CAPITAL
  MANAGED_SERVICES
  GCC
  AUTOMATION
  SUPPORT
  PRODUCT
  SOLUTION
  RCM
}

enum Geography {
  AMERICAS
  INDIA
  PHILIPPINES
  EMEA
  ANZ
}

enum Entity {
  YITRO_GLOBAL
  YITRO_TECH
}

enum DealStage {
  OPPORTUNITY_IDENTIFIED
  PROPOSAL_SUBMITTED
  NEGOTIATING
  CLOSING
  ORDER_WON
  ORDER_LOST
}

enum LeadSource {
  WEBSITE
  REFERRAL
  TRADE_SHOW
  COLD_CALL
  EMAIL
  PARTNER
}

enum LeadStatus {
  NEW
  WORKING
  QUALIFIED
  UNQUALIFIED
}

enum LeadRating {
  HOT
  WARM
  COLD
}

enum UserRole {
  ADMIN
  SALES_MANAGER
  SALES_REP
  USER
}
